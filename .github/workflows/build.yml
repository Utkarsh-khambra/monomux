name: "Build and continuous Package"

on:
  push:

jobs:
  lint:
    name: "Style checks"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: "Code style (clang-format)"
        id: clang-format
        continue-on-error: true
        uses: jidicula/clang-format-action@v4.6.2
        with:
          check-path: src
      # - name: "Clang-Tidy"
      #   if: ${{ matrix.compiler == "clang" }}
      #   env:
      #     CC: ${{ steps.dependencies.outputs.CC }}
      #   run: |
      #     CLANG_TIDY=$(echo ${CC} | sed 's/clang/clang-tidy/')
      #     sudo apt-get -y install ${CLANG_TIDY}
      #     # Figure out how to automate this nicely.
      #     # ${CLANG_TIDY} -p ./Build/compile_commands.json

  lts-linux:
    strategy:
      fail-fast: false
      matrix:
        distribution: [
          "ubuntu-18.04",
          "ubuntu-20.04"
        ]
        compiler: [
          "gcc",
          "clang"
        ]
    name: "${{ matrix.distribution }} LTS, ${{ matrix.compiler }}"
    runs-on: ${{ matrix.distribution }}
    steps:
      - name: "Install dependencies"
        id: dependencies
        run: |
          echo "::group::Updating package lists"
          sudo apt-get -y update
          echo "::endgroup::"

          # Get the latest version of the compiler available for the
          # distribution.
          echo "::group::Installing compiler ${{ matrix.compiler }}"
          CC=$(apt-cache search $(echo "${{ matrix.compiler }}") | grep "^${{ matrix.compiler }}-" | cut -d "-" -f 1-2 | grep "\-[0-9]" | sort -rV | head -n 1)
          if [[ "${{ matrix.compiler }}" == "gcc" ]];
          then
            CXX=$(echo ${CC} | sed 's/gcc/g++/')
            # With GCC, you need to install G++-X to get C++ compilation.
            sudo apt-get -y install ${CXX}
          elif [[ "${{ matrix.compiler }}" == "clang" ]];
          then
            CXX=$(echo ${CC} | sed 's/clang/clang++/')
            # Clang works both ways.
            sudo apt-get -y install ${CC}
          fi
          echo "Using compiler ${CC} (${CXX})..."
          echo "::set-output name=CC::${CC}"
          echo "::set-output name=CXX::${CXX}"
          echo "::endgroup::"

          echo "::group::Installing CMake"
          if [[ "${{ matrix.distribution }}" == "ubuntu-18.04" ]]
          then
            # We need a newer version of CMake than supplied by Ubuntu...
            # FetchContent is only available 3.11 and onwards, Ubuntu gives
            # 3.10.
            sudo apt-get install -y software-properties-common lsb-release
            sudo apt-get install -y wget
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
            sudo apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
            sudo apt-get -y update
            sudo apt-get -y install cmake="3.15.0-0kitware1" cmake-data="3.15.0-0kitware1"
          elif [[ "${{ matrix.distribution }}" == "ubuntu-20.04" ]]
          then
            sudo apt-get -y install \
              cmake
          fi
          echo "::endgroup::"
      - uses: actions/checkout@v2
      - name: "Prepare build with CMake"
        env:
          CC: ${{ steps.dependencies.outputs.CC }}
          CXX: ${{ steps.dependencies.outputs.CXX }}
        run: |
          cmake --version

          cmake -S . -B Build \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      - name: "Build"
        run: |
          cmake --build ./Build -- -j
      - name: "Test"
        run: |
          cmake --build ./Build -- -j check
      - name: "Package"
        id: binary-package
        continue-on-error: true
        run: |
          cd Build

          echo "::group::Tarball"
          cpack -V -G TGZ
          echo "::endgroup::"

          echo "::group::Debian package"
          cpack -V -G DEB
          echo "::endgroup::"

          cd ..

          # TODO: Do something with version numbers and such!

          mv -v Build/MonoMux-*-Linux.tar.gz "./MonoMux-${{ matrix.distribution }}-${{ matrix.compiler }}.tgz"
          mv -v Build/MonoMux-*-Linux.deb "./MonoMux-${{ matrix.distribution }}-${{ matrix.compiler }}.deb"
      - name: "Check whether the Debian package is installable"
        id: deb-install
        # This condition is disabled so running the CI locally via `act` executes this step.
        # if: steps.binary-package.outcome == 'success'
        run: |
          if [[ "${{ steps.binary-package.outcome }}" == "success" ]]
          then
            sudo apt-get -fy install "./MonoMux-${{ matrix.distribution }}-${{ matrix.compiler }}.deb"
          else
            echo "::warning title=Debian Package self-check skipped::The package failed to assemble and thus wasn't tested."
          fi
      - name: "Upload binary package artefacts: Tarball"
        if: steps.binary-package.outcome == 'success'
        uses: actions/upload-artifact@v2
        with:
          path: "MonoMux-${{ matrix.distribution }}-${{ matrix.compiler }}.tgz"
          name: "MonoMux-${{ matrix.distribution }}-${{ matrix.compiler }}.tgz"
          if-no-files-found: warn
          retention-days: 7
      - name: "Upload binary package artefacts: Debian package"
        if: steps.binary-package.outcome == 'success' && steps.deb-install.outcome == 'success'
        uses: actions/upload-artifact@v2
        with:
          path: "MonoMux-${{ matrix.distribution }}-${{ matrix.compiler }}.deb"
          name: "MonoMux-${{ matrix.distribution }}-${{ matrix.compiler }}.deb"
          if-no-files-found: warn
          retention-days: 7
