name: "Build and continuous Package"

on:
  push:

jobs:
  style:
    name: "Style checks"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: "Code style (clang-format)"
        id: clang-format
        uses: jidicula/clang-format-action@v4.6.2
        with:
          check-path: src

  lts-linux:
    strategy:
      fail-fast: false
      matrix:
        distribution: [
          "ubuntu-18.04",
          "ubuntu-20.04"
        ]
        compiler: [
          "gcc",
          "clang"
        ]
    name: "${{ matrix.distribution }} LTS, ${{ matrix.compiler }}"
    runs-on: ${{ matrix.distribution }}
    steps:
      - uses: actions/checkout@v2
      - name: "Install dependencies"
        id: dependencies
        env:
          COMPILER: ${{ matrix.compiler }}
          DISTRO: ${{ matrix.distribution }}
        shell: bash
        run: .github/scripts/get-dependencies.sh
      - name: "Prepare build with CMake"
        env:
          CC: ${{ steps.dependencies.outputs.CC }}
          CXX: ${{ steps.dependencies.outputs.CXX }}
        run: |
          cmake --version

          cmake -S . -B Build \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      - name: "Build"
        run: |
          cmake --build ./Build -- -j
      - name: "Test"
        run: |
          cmake --build ./Build -- -j check
      - name: "Package"
        id: binary-package
        continue-on-error: true
        run: |
          cd Build

          echo "::group::Tarball"
          cpack -V -G TGZ
          echo "::endgroup::"

          echo "::group::Debian package"
          cpack -V -G DEB
          echo "::endgroup::"

          cd ..

          echo "::set-output name=PACKAGE_VERSION::$(cat Build/Version.txt)"
          mv -v Build/MonoMux-*-Linux.tar.gz \
            "./MonoMux-$(cat Build/Version.txt)-${{ matrix.compiler }}.tgz"
          mv -v Build/MonoMux-*-Linux.deb \
            "./MonoMux-$(cat Build/Version.txt)-${{ matrix.compiler }}.deb"
      - name: "Check whether the Debian package is installable"
        id: deb-install
        # This condition is disabled so running the CI locally via `act` executes this, and further, step.
        # if: steps.binary-package.outcome == 'success'
        run: |
          if [[ "${{ steps.binary-package.outcome }}" == "success" ]]
          then
            sudo apt-get -fy install \
              "./MonoMux-${{ steps.binary-package.outputs.PACKAGE_VERSION }}-${{ matrix.compiler }}.deb"
          else
            echo "::warning title=Debian Package self-check skipped::The package failed to assemble and thus wasn't tested."
          fi
      - name: "Upload binary package artefacts: Tarball"
        if: steps.binary-package.outcome == 'success' && matrix.distribution == 'ubuntu-18.04' && matrix.compiler == 'clang'
        uses: actions/upload-artifact@v2
        with:
          path: "MonoMux-${{ steps.binary-package.outputs.PACKAGE_VERSION }}-${{ matrix.compiler }}.tgz"
          name: "MonoMux-${{ steps.binary-package.outputs.PACKAGE_VERSION }}-${{ matrix.compiler }}.tgz"
          if-no-files-found: warn
          retention-days: 7
      - name: "Upload binary package artefacts: Debian package"
        if: steps.binary-package.outcome == 'success' && steps.deb-install.outcome == 'success' && matrix.distribution == 'ubuntu-18.04' && matrix.compiler == 'clang'
        uses: actions/upload-artifact@v2
        with:
          path: "MonoMux-${{ steps.binary-package.outputs.PACKAGE_VERSION }}-${{ matrix.compiler }}.deb"
          name: "MonoMux-${{ steps.binary-package.outputs.PACKAGE_VERSION }}-${{ matrix.compiler }}.deb"
          if-no-files-found: warn
          retention-days: 7
